@page
@model IndexModel
@{
    ViewData["Title"] = "RAMBHA-LP Explorer";
}

<section class="hero">
    <div class="container-lg">
        <div class="d-flex align-items-center justify-content-between flex-wrap gap-3">
            <div>
                <div class="title">RAMBHA-LP Explorer</div>
                <div class="subtitle">Quick-look analysis of Langmuir probe I-V sweeps (Vf, Vp, Te, I<sub>e,sat</sub>)</div>
            </div>
            <div class="text-end">
                <span class="badge rounded-pill text-bg-dark border border-secondary-subtle">Beta</span>
            </div>
        </div>
    </div>
</section>

<div class="container-lg mt-4">
    <div class="row g-4">
        <!-- Left: Controls -->
        <div class="col-12 col-lg-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">Load & Analyze</h5>

                    <form method="post" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label class="form-label">CSV file (V, I)</label>
                            <input asp-for="Upload" type="file" class="form-control" />
                            <div class="form-text">Two columns: v (volts), i (amps). Headers are ok.</div>
                        </div>

                        <div class="d-flex gap-2">
                            <button class="btn btn-accent" asp-page-handler="Analyze">Analyze</button>
                            <a class="btn btn-outline-light" asp-page-handler="Sample">Load sample</a>
                        </div>
                    </form>

                    @if (!string.IsNullOrWhiteSpace(Model.InfoMessage))
                    {
                        <div class="alert alert-info mt-3" role="alert">@Model.InfoMessage</div>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">@Model.ErrorMessage</div>
                    }

                    <hr class="soft my-4" />

                    <div class="small">
                        <strong>Tips</strong>
                        <ul class="mt-2 mb-0">
                            <li>Use consistent sweep direction (low→high V) for nicest plots.</li>
                            <li>Positive I assumed as electron current in retarding region.</li>
                            <li>Te is from ln(I) fit between Vf and Vp (trimmed 10%).</li>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Metrics -->
            <div class="card mt-4">
                <div class="card-body">
                    <h6 class="text-uppercase text-muted mb-3">Results</h6>

                    <div class="d-grid gap-3">
                        <div class="metric cyan">
                            <div class="flex-grow-1">
                                <div class="k">Floating potential (Vf)</div>
                                <div class="v">@Model.Analysis?.FloatingPotential_Vf?.ToString("0.###") ?? "—"</div>
                            </div>
                        </div>
                        <div class="metric mag">
                            <div class="flex-grow-1">
                                <div class="k">Plasma potential (Vp)</div>
                                <div class="v">@Model.Analysis?.PlasmaPotential_Vp?.ToString("0.###") ?? "—"</div>
                            </div>
                        </div>
                        <div class="metric amb">
                            <div class="flex-grow-1">
                                <div class="k">Electron temperature (Te, eV)</div>
                                <div class="v">@Model.Analysis?.ElectronTemperature_eV?.ToString("0.###") ?? "—"</div>
                            </div>
                        </div>
                        <div class="metric lime">
                            <div class="flex-grow-1">
                                <div class="k">Electron saturation current (A)</div>
                                <div class="v">@Model.Analysis?.ElectronSaturationCurrent_Amps?.ToString("0.###E+0") ?? "—"</div>
                            </div>
                        </div>
                    </div>

                    <div class="mt-3">
                        <small class="note">
                            Quick-look method: zero-crossing Vf, max dI/dV for Vp,
                            ln(I) vs V slope for Te, high-V tail average for I<sub>e,sat</sub>.
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right: Plot -->
        <div class="col-12 col-lg-8">
            <div class="card plot-card">
                <div class="card-body">
                    <div class="d-flex align-items-center justify-content-between">
                        <h5 class="card-title mb-0">I–V Curve</h5>
                        <div class="text-muted small">
                            @if (Model.Points?.Count > 0)
                            {
                                <span>Loaded <strong>@Model.Points.Count</strong> points</span>
                                ;
                            }
                        </div>
                    </div>
                    <div id="chart" class="mt-3" style="height:460px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.plot.ly/plotly-2.32.0.min.js"></script>
    <script>
        const xs = @Html.Raw(Model.PointsJson ?? "[]");
        const ys = @Html.Raw(Model.CurrentsJson ?? "[]");

        const vf = @Html.Raw(Model.Analysis?.FloatingPotential_Vf?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "null");
        const vp = @Html.Raw(Model.Analysis?.PlasmaPotential_Vp?.ToString(System.Globalization.CultureInfo.InvariantCulture) ?? "null");

        const trace = {
            x: xs, y: ys, mode: 'lines+markers',
            line: { width: 2 }, marker: { size: 6 }
        };

        const shapes = [];
        if (vf !== null) shapes.push({
            type: 'line', x0: vf, x1: vf, y0: Math.min(...ys, 0), y1: Math.max(...ys, 0),
            line: { dash: 'dot', width: 2 }
        });
        if (vp !== null) shapes.push({
            type: 'line', x0: vp, x1: vp, y0: Math.min(...ys, 0), y1: Math.max(...ys, 0),
            line: { dash: 'dash', width: 2 }
        });

        Plotly.newPlot('chart', [trace], {
            margin: { l: 60, r: 20, t: 10, b: 45 },
            paper_bgcolor: 'rgba(0,0,0,0)',
            plot_bgcolor: 'rgba(0,0,0,0)',
            xaxis: { title: 'Voltage (V)', zeroline: false, gridcolor: 'rgba(255,255,255,.08)', color: '#e8eefc' },
            yaxis: { title: 'Current (A)', zeroline: true, zerolinecolor: 'rgba(255,255,255,.25)', gridcolor: 'rgba(255,255,255,.08)', color: '#e8eefc' },
            shapes
        }, { responsive: true });
    </script>
}